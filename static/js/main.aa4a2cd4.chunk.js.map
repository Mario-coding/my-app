{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","timer","setTimer","isActive","setIsActive","increment","useRef","handleStart","current","setInterval","handlePause","clearInterval","handleResume","handleReset","className","centiSeconds","slice","seconds","Math","floor","minutes","formatTime","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oMA+EeA,EA1EH,WAAO,IAAD,EACUC,mBAAS,GADnB,mBACTC,EADS,KACFC,EADE,OAEgBF,oBAAS,GAFzB,mBAETG,EAFS,KAECC,EAFD,KAGVC,EAAiBC,iBAAO,MAG1BC,EAAc,WAClBH,GAAY,GACZC,EAAUG,QAAUC,aAAY,WAChCP,GAAS,SAACD,GAAD,OAAWA,EAAQ,OACzB,KAGCS,EAAc,WAClBN,GAAY,GACZO,cAAcN,EAAUG,UAGpBI,EAAe,WACnBR,GAAY,GACZC,EAAUG,QAAUC,aAAY,WAChCP,GAAS,SAACD,GAAD,OAAWA,EAAQ,OACzB,KAGCY,EAAc,WAClBF,cAAcN,EAAUG,SACxBJ,GAAY,GACZF,EAAS,IA+BX,OACE,qBAAKY,UAAU,MAAf,SACE,sBAAKA,UAAU,YAAf,UACE,qBAAKA,UAAU,mBAAf,uBACA,qBAAKA,UAAU,oBAAf,SAhCa,WACjB,IAAMC,EAAe,WAAId,EAAQ,KAAMe,OAAO,GACxCC,EAAU,WAAIC,KAAKC,MAAMlB,EAAQ,KAAO,IAAKe,OAAO,GACpDI,EAAU,WAAIF,KAAKC,MAAMlB,EAAQ,KAAQ,IAAKe,OAAO,GAE3D,MAAM,GAAN,OAAUI,EAAV,cAAuBH,EAAvB,cAAoCF,GA4B7BM,KAxBFlB,GAAsB,IAAVF,GAILE,GAAYF,EAAQ,EAE5B,qCACA,wBAAQqB,QAASV,EAAjB,oBACA,wBAAQU,QAAST,EAAjB,sBAKF,mCACA,wBAAQS,QAASZ,EAAjB,qBAZE,wBAAQY,QAASf,EAAjB,yBCjCSgB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.aa4a2cd4.chunk.js","sourcesContent":["import React, { useRef, useState } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport { createIncrementalProgram } from 'typescript';\r\n\r\nconst App = () => {\r\n  const [timer, setTimer] = useState(0);\r\n  const [isActive, setIsActive] = useState(false);\r\n  const increment: any = useRef(null);\r\n\r\n\r\nconst handleStart = () => {\r\n  setIsActive(true)\r\n  increment.current = setInterval(() => {\r\n  setTimer((timer) => timer + 1)\r\n  }, 10)\r\n}\r\n\r\nconst handlePause = () => {\r\n  setIsActive(false)\r\n  clearInterval(increment.current)\r\n}\r\n\r\nconst handleResume = () => {\r\n  setIsActive(true)\r\n  increment.current = setInterval(() => {\r\n  setTimer((timer) => timer + 1)\r\n  }, 10)\r\n}\r\n\r\nconst handleReset = () => {\r\n  clearInterval(increment.current);\r\n  setIsActive(true)\r\n  setTimer(0);\r\n}\r\n\r\nconst formatTime = () => {\r\n  const centiSeconds = `0${timer % 100}`.slice(-2)\r\n  const seconds = `0${Math.floor(timer / 100) % 60}`.slice(-2)\r\n  const minutes = `0${Math.floor(timer / 6000) % 60}`.slice(-2)\r\n\r\n  return `${minutes} : ${seconds} : ${centiSeconds}`\r\n}\r\n\r\nconst renderingBtn = () => {\r\n  if (!isActive && timer === 0) {\r\n    return (\r\n      <button onClick={handleStart}>Start</button>\r\n    )\r\n  } else if (!isActive && timer > 0) {\r\n    return (\r\n      <>\r\n      <button onClick={handleResume}>Resume</button>\r\n      <button onClick={handleReset}>Reset</button>\r\n      </>\r\n    )\r\n  }\r\n  return (\r\n    <>\r\n    <button onClick={handlePause}>Pause</button>\r\n    </>\r\n  )\r\n}\r\n\r\nreturn (\r\n  <div className=\"App\">\r\n    <div className=\"Stopwatch\">\r\n      <div className=\"Stopwatch-header\">Stopwatch</div>\r\n      <div className=\"Stopwatch-display\">\r\n        {formatTime()}\r\n      </div>\r\n      {renderingBtn()}\r\n      {/* <footercard name=\"Mario\" /> */}\r\n    </div>\r\n  </div>\r\n)\r\n\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","  \r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}